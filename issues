OBJECTIUS A CURT TERMINI EN LA GUI

Saber fer algo, gracies.


---------------------------------------------------------------


COSES A IMPLEMENTAR EN EL CORE

-La possibilitat de fer el soroll passant un seed, no es dona d'inici, 
sino que crec que ho ha de gestionar el propi evolucionador. Es 
correcte? uhmm

-els deletes i mecanismes contra errors en el reader (asserts?)

-Funcions de regió i les que queden de les altres. 

-Com passem la matriu? S'ha de decidir entre passar un string i que hi 
hagi una taula dins de la funcio mateixa de filtrar, o bé s'ha de passar 
tota la matriu o un punter a ella desde la crida de l'eval. Jo soc 
partidari del codi string, pero segur que implica menys rendiment o 
coses per l'estil.

---------------------------------------------------------------

PROBLEMES DEL READER

-Problemes deixant espais, però només en l'ultim caracter, és a dir, 
entre lultim param i el parentesi final

-Amb parentesi de mes al prinipi també peta, però aixo sembla evident i 
insolucionable.

-Amb paràmetre de menys peta. S'ha de fer algo pq no sigui així o no 
val la pena?

----------------------------------------------------------------

OBJECTIUS EN L'EVOSYSTEM

-Que sigui una altra llibreria, és a dir , que no estigui dins de Node. 

-L'objectiu principal és que rebi 2 funcions, i que les llegeixi 
guardant-les en una espècie de vector o algo i que a partir d'aqui faci:

--recombinació
--augmenti en 1 grau el numero de funcions i que aquesta sigui aleatòria
--que els v_fix d'algunes siguin parametres random. Algunes altres q es 
quedin amb els valors heretats directament.

-És important saber què torna. Segurament pugui ser un string a un mòdul 
superior (el de python?) perquè faci l'execució. Tot i que també podria 
generar ell el Node, encara que no té molt de sentit.

-----------------------------------------------------------------

-classe general que gestioni un vector de 16 (o X posicions) d'strings.
-Ha de ser capaç d'anar recorrent l'arbre de 2 d'ells i generar els 
altres 16. En alguns casos combinant primer, en altres mutant 
primer..etc
-És important que quan recorri larbre, es crei recursivament, com una 
taula on hi hagi guardades aquestes funcions, cosa que ens servira per 
després mutar-les o en tot cas, accedir-hi facilment.

Mètodes mes importants:

	-mapeja_funcio(string) aqui es on recorre l'arbre i va omplint 
la taula amb les diferents funcions que conté
	-muta(float)  on el float es amb la probabilitat amb la que ho 
fa
	-combina(string1, string2, float) el float es la prob de 
combinacio
	


